using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using EnouFlowInstanceLib;

namespace EnouFlowEngine
{
  public abstract class FlowActionResult
  {
    public int flowActionRequestId { get; }
    public string clientRequestGuid { get; }
    public EnumFlowActionRequestType requestType { get; }
    public FlowInstance flowInstance { get; }
    public bool succeed { get; }
    public string failReason {
      get
      {
        return _FailReason;
      }
      protected set{
        _FailReason = value;
      }
    }
    private string _FailReason;

    public FlowActionResult(
      int flowActionRequestId, string clientRequestGuid,
      EnumFlowActionRequestType requestType,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null
      )
    {
      this.flowActionRequestId = flowActionRequestId;
      this.clientRequestGuid = clientRequestGuid;
      this.requestType = requestType;
      this.flowInstance = flowInstance;
      this.succeed = succeed;
      if (!succeed && string.IsNullOrEmpty(failReason))
      {
        this.failReason = "引擎未给出失败原因.";
      }
    }
  }

  public class FlowActionTakeResult { }

  public class FlowActionMoveToResult : FlowActionResult
  {
    public FlowActionMoveToResult(int flowActionRequestId,
      string clientRequestGuid,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null)
      : base(flowActionRequestId, clientRequestGuid, 
          EnumFlowActionRequestType.moveTo, flowInstance 
          ,succeed, failReason)
    {
    }
  }

  public class FlowActionMoveToAutoGeneratedResult : FlowActionResult
  {
    public FlowActionMoveToAutoGeneratedResult(int flowActionRequestId,
      string clientRequestGuid,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null)
      : base(flowActionRequestId, clientRequestGuid,
          EnumFlowActionRequestType.moveToAutoGenerated, flowInstance
          , succeed, failReason)
    {
    }
  }

  public class FlowActionStartResult : FlowActionResult
  {
    public FlowActionStartResult(int flowActionRequestId, 
      string clientRequestGuid,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null) 
      :base(flowActionRequestId, clientRequestGuid, 
         EnumFlowActionRequestType.start, flowInstance
          , succeed, failReason)
    {

    }
  }

  public class FlowActionRejectToStartResult : FlowActionResult
  {
    public FlowActionRejectToStartResult(int flowActionRequestId,
      string clientRequestGuid,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null)
      : base(flowActionRequestId, clientRequestGuid, 
          EnumFlowActionRequestType.rejectToStart, flowInstance
          , succeed, failReason)
    {
    }
  }

  public class FlowActionInviteOtherResult : FlowActionResult
  {
    public FlowActionInviteOtherResult(int flowActionRequestId,
      string clientRequestGuid,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null)
      : base(flowActionRequestId, clientRequestGuid, 
          EnumFlowActionRequestType.inviteOther, flowInstance
          , succeed, failReason)
    {
    }
  }

  public class FlowActionInviteOtherFeedbackResult : FlowActionResult
  {
    public FlowActionInviteOtherFeedbackResult(int flowActionRequestId,
      string clientRequestGuid,
      FlowInstance flowInstance,
      bool succeed = true, string failReason = null)
      : base(flowActionRequestId, clientRequestGuid, 
          EnumFlowActionRequestType.inviteOtherFeedback, flowInstance
          , succeed, failReason)
    {
    }
  }

  public class FlowActionHoldUntilResult { }

  public class FlowActionClawbackResult { }

  public class FlowActionJumpToResult { }

  public class FlowRevokeTakeResult { }

  public class FlowActionTerminateResult { }

  public class FlowActionTakeoverResult { }

  public class FlowActionRestartToResult { }

  public class FlowActionUrgeResult { }

  public class FlowActionImpersonateResult { }

  public class FlowActionAdjustFlowTemplateResult { }
}
